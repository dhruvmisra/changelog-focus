import { type NextPage } from "next";

import Head from "next/head";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { api } from "@/utils/api";
import { FormEvent, useEffect, useState } from "react";
import { toast } from "react-hot-toast";
import { useAutoAnimate } from "@formkit/auto-animate/react";
import ChangelogContent from "@/components/ChangelogContent";

dayjs.extend(relativeTime);

const Home: NextPage = () => {
    const [mainRef] = useAutoAnimate();
    const [repositoryLink, setRepositoryLink] = useState("");

    const {
        data: releases,
        refetch: refetchReleases,
        isFetched: releasesFetched,
    } = api.changelog.getReleases.useQuery(
        { repositoryLink },
        {
            enabled: false,
            onError: (error) => {
                const repositoryError = error.data?.zodError?.fieldErrors.repositoryLink;
                toast.error(`Oops, somehting went wrong! ${repositoryError?.join(", ")}`);
            },
        }
    );
    const [selectedReleases, setSelectedReleases] = useState<boolean[]>([]);
    const firstSelectedReleaseIndex: number = selectedReleases.reduce(
        (prev, selected, index) => (prev == -1 ? (selected ? index : prev) : prev),
        -1
    );
    const lastSelectedReleaseIndex: number = selectedReleases.reduce(
        (prev, selected, index) => (selected ? index : prev),
        -1
    );

    useEffect(() => {
        setSelectedReleases(new Array(releases ? releases.length : 0).fill(false));
    }, [releases]);

    const getReleases = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        await refetchReleases();
    };

    const handleRepositoryLinkChange = (e: FormEvent<HTMLInputElement>) => {
        setRepositoryLink(e.currentTarget.value);
    };

    const handleReleaseSelection = (e: FormEvent<HTMLInputElement>, index: number) => {
        e.preventDefault();
        let newSelectedReleases = [...selectedReleases];

        let indexOfGroupBefore = -1;
        let indexOfGroupAhead = -1;
        for (let i = index; i >= 0; i--) {
            if (newSelectedReleases[i]) {
                indexOfGroupBefore = i;
                break;
            }
        }
        for (let i = index; i < newSelectedReleases.length; i++) {
            if (newSelectedReleases[i]) {
                indexOfGroupAhead = i;
                break;
            }
        }

        if (indexOfGroupBefore != -1 && indexOfGroupAhead != -1) {
            newSelectedReleases = new Array(newSelectedReleases.length).fill(false);
            newSelectedReleases[index] = true;
        } else if (indexOfGroupBefore == -1 && indexOfGroupAhead == -1) {
            newSelectedReleases[index] = true;
        } else if (indexOfGroupBefore != -1) {
            for (let i = indexOfGroupBefore + 1; i <= index; i++) {
                newSelectedReleases[i] = true;
            }
        } else if (indexOfGroupAhead != -1) {
            for (let i = index; i < indexOfGroupAhead; i++) {
                newSelectedReleases[i] = true;
            }
        }
        setSelectedReleases(newSelectedReleases);
    };

    return (
        <>
            <Head>
                <title>Changelog Simplify</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main
                className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]"
                ref={mainRef}
            >
                <div className="container flex flex-col items-center justify-center gap-12 px-4 py-4 ">
                    <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                        Changelog <span className="text-[hsl(280,100%,70%)]">Simplify</span>
                    </h1>

                    <form className="w-full p-4" onSubmit={getReleases}>
                        <div className="mb-6">
                            <input
                                type="text"
                                id="repository-link"
                                className="w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500"
                                placeholder="Repository link"
                                value={repositoryLink}
                                onChange={handleRepositoryLinkChange}
                                required
                            />
                        </div>
                        <button
                            type="submit"
                            className="mx-auto block w-full rounded-lg bg-blue-700 px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 sm:w-auto"
                        >
                            Get releases
                        </button>
                    </form>
                </div>

                {releasesFetched && (
                    <div className="container">
                        <h3 className="mb-4 text-lg font-medium text-gray-900 dark:text-white">
                            Releases:
                        </h3>
                        <ul className="w-full gap-6 md:grid-cols-3">
                            {releases?.map((release, index) => (
                                <li key={`${release.id}-${selectedReleases[index]}`}>
                                    <input
                                        type="checkbox"
                                        id={release.name}
                                        value={release.id}
                                        className="peer hidden"
                                        checked={selectedReleases[index]}
                                        onChange={(e) => handleReleaseSelection(e, index)}
                                    />
                                    <label
                                        htmlFor={release.name}
                                        className="inline-flex w-full cursor-pointer items-center justify-between rounded-lg border border-gray-200 bg-white p-2.5 text-gray-500 hover:bg-gray-50 hover:text-gray-600 peer-checked:border-blue-600 peer-checked:text-gray-600 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-400 dark:hover:bg-gray-900 dark:hover:text-gray-300 dark:peer-checked:text-gray-300"
                                    >
                                        <div className="block">
                                            <div className="text-md w-full font-semibold">
                                                {release.name}
                                            </div>
                                        </div>
                                        <div className="block">
                                            <div className="w-full text-sm text-gray-700">
                                                {`${dayjs(release.created_at).fromNow()}`}
                                            </div>
                                        </div>
                                    </label>
                                </li>
                            ))}
                        </ul>

                        {releases &&
                            firstSelectedReleaseIndex !== -1 &&
                            lastSelectedReleaseIndex !== -1 && (
                                <button
                                    type="button"
                                    className="mx-auto mt-4 block w-full rounded-lg bg-blue-700 px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 sm:w-auto"
                                >
                                    {firstSelectedReleaseIndex == lastSelectedReleaseIndex
                                        ? `Show changelog for '${releases[firstSelectedReleaseIndex]?.name}'`
                                        : `Show changelog from '${releases[lastSelectedReleaseIndex]?.name}' to '${releases[firstSelectedReleaseIndex]?.name}'`}
                                </button>
                            )}
                    </div>
                )}
                {releases && <ChangelogContent releases={releases} />}
            </main>
        </>
    );
};

export default Home;
